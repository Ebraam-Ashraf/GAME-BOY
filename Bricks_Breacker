; This code is written for STM32F407VG
; Important Note: Backlight should have 5V (in hardware)
; Special Toggle Button in EasyMX
    EXPORT __main

; Pin Connection 
;
;   +--------- TFT ---------+
;   |      D0   =  PE0      |
;   |      D1   =  PE1      |
;   |      D2   =  PE2      |
;   |      D3   =  PE3      |
;   |      D4   =  PE4      |
;   |      D5   =  PE5      |
;   |      D6   =  PE6      |
;   |      D7   =  PE7      |
;   |-----------------------|
;   |      RST  =  PE8      |
;   |      BCK  =  PE9      |
;   |      RD   =  PE10     |
;   |      WR   =  PE11     |
;   |      RS   =  PE12     |
;   |      CS   =  PE15     |
;   +-----------------------+


;                          TFT Coordinate System (240x320)
;
;    Y-axis (up)240
;  |                                                  
;  |               |█|    |█|  |█|  |█|  |█|  |█|  |█|  |█|  |█|                                                 
;  |                                                
;  |                    |█|  |█|  |█|  |█|  |█|  |█|  |█|             
;  |                                                 
;  |                  |█|    |█|  |█|  |█|    |█|                           
;  |       
;  |
;  |                     Y2                  ●
;  |                     X1  ___________________________ X2
;  |                      Y1
;  ;--------------------------------------------------------------------------------->
;       X-axis (right) 320




        AREA    MyData, DATA, READWRITE

PADDLE_WIDTH         SPACE    2
PADDLE_HEIGHT        SPACE    2

; BALL DATA
BALL_X               SPACE    2
BALL_Y               SPACE    2
BALL_VELOCITY_X      SPACE    2
BALL_VELOCITY_Y      SPACE    2
BALL_COLOR           SPACE    2

; LIVES COUNT
LIVES             SPACE    2

; PADDLE
PADDLE_COLOR        SPACE    2
PADDLE_X1          SPACE    2
PADDLE_X2          SPACE    2
PADDLE_Y1          SPACE    2
PADDLE_Y2          SPACE    2
	

;Colors
Red     	EQU 0xF800  ; 11111 000000 00000
Green   	EQU 0x2d20  ; 00000 111111 00000
Blue    	EQU 0x001F  ; 00000 000000 11111
Yellow  	EQU 0xFFE0  ; 11111 111111 00000
White   	EQU 0xFFFF  ; 11111 111111 11111
Black   	EQU 0x0000  ; 00000 000000 00000

; Define register base addresses
RCC_BASE        EQU     0x40023800
GPIOA_BASE      EQU     0x40020000 ; CHANGE THE ADDRESS TO THE CORRECT ONE (FOR: IBRAHIM ABOHOLA)
GPIOB_BASE      EQU     0x40020400

; Define register offsets
RCC_AHB1ENR     EQU     0x30
GPIO_MODER      EQU     0x00
GPIO_OTYPER     EQU     0x04
GPIO_OSPEEDR    EQU     0x08
GPIO_PUPDR      EQU     0x0C
GPIO_IDR        EQU     0x10
GPIO_ODR        EQU     0x14

; Control Pins on Port E
TFT_RST         EQU     (1 << 8)
TFT_RD          EQU     (1 << 10)
TFT_WR          EQU     (1 << 11)
TFT_DC          EQU     (1 << 12)
TFT_CS          EQU     (1 << 15)

DELAY_INTERVAL  EQU     0x90000 

	AREA RESET, CODE, READONLY
__main FUNCTION

 ; Initialize values
        LDR     R0, =PADDLE_WIDTH
        MOV     R1, #20
        STRH    R1, [R0]

        LDR     R0, =PADDLE_HEIGHT
        MOV     R1, #40
        STRH    R1, [R0]

        ; BALL
        LDR     R0, =BALL_X
        MOV     R1, #170
        STRH    R1, [R0]

        LDR     R0, =BALL_Y
        MOV     R1, #110
        STRH    R1, [R0]

        LDR     R0, =BALL_VELOCITY_X
        MOV     R1, #2
        STRH    R1, [R0]

        LDR     R0, =BALL_VELOCITY_Y
        MOV     R1, #2
        STRH    R1, [R0]

        LDR     R0, =BALL_COLOR
        MOV     R1, #Red         ; Make sure Red is defined with EQU
        STRH    R1, [R0]

        ; LIVES
        LDR     R0, =LIVES
        MOV     R1, #3
        STRH    R1, [R0]



        ; PADDLE
        LDR     R0, =PADDLE_COLOR
        MOV     R1, #Green       
        STRH    R1, [R0]

        LDR     R0, =PADDLE_X1
        MOV     R1, #160
        STRH    R1, [R0]

        LDR     R0, =PADDLE_X2
        MOV     R1, #200
        STRH    R1, [R0]

        LDR     R0, =PADDLE_Y1
        MOV     R1, #40
        STRH    R1, [R0]

        LDR     R0, =PADDLE_Y2
        MOV     R1, #50
        STRH    R1, [R0]

       

    ; Enable clocks for GPIOE
    LDR R0, =RCC_BASE + RCC_AHB1ENR
    LDR R1, [R0]
    ORR R1, R1, #0x1F
    STR R1, [R0]
    ; Configure GPIOA as General Purpose Output Mode
    LDR R0, =GPIOA_BASE + GPIO_MODER
    LDR R1, =0x55555555  
    STR R1, [R0]
    ; Configure output speed for GPIOE (High Speed)
    LDR R0, =GPIOA_BASE + GPIO_OSPEEDR
    LDR R1, =0xFFFFFFFF  
    STR R1, [R0]
		; Configure GPIOB as General Purpose INput Mode
    LDR R0, =GPIOB_BASE + GPIO_MODER
    LDR R1, =0x00000000 
    STR R1, [R0]
    ; Initialize TFT
    BL TFT_Init
	
	
	
	;CLEAR THE SCREEN
	MOV R0, #Black
	BL TFT_FillScreen
	BL delay
	
	MOV R0, #0
	MOV R1, #0
	MOV R2, #0
	MOV R3, #0
	MOV R4, #0
	MOV R5, #0
	MOV R6, #0
	MOV R7, #0
	MOV R8, #0
	MOV R9, #0
	MOV R10, #0
	MOV R11, #0
	MOV R12, #0

; DRAWS PADDLE
MOV R0, #Green
LDR R5,=PADDLE_X1
LDRH R1, [R5]
LDR R6, =PADDLE_X2
LDRH R2, [R6]
LDR R5,=PADDLE_Y1
LDRH R3 ,[R5]
LDR R6, =PADDLE_Y2
LDRH R4, [R6]
BL Draw_Rectangle

;DRAW THE BALL
MOV R1, #Red
LDR R5, =BALL_Y
LDRH R5, [R5]
LDR R6, =BALL_X
LDRH R6, [R6]
BL TFT_DrawSquare



;TO DO : DRAW BRICKS + DEFINE ARRRAY OF THEM

MAIN_LOOP	
	BL PING_PONG_MOVE_PLAYERS
	BL BALL_CHECK_MOVE
	BL delay
  BL CHECK_END_GAME
	B MAIN_LOOP
	
    B .








































; *************************************************************
; TFT Write Command (R0 = command)
; *************************************************************
TFT_WriteCommand
    PUSH {R1-R2, LR}

    ; Set CS low
    LDR R1, =GPIOA_BASE + GPIO_ODR
    LDR R2, [R1]
    BIC R2, R2, #TFT_CS
    STR R2, [R1]

    ; Set DC (RS) low for command
    BIC R2, R2, #TFT_DC
    STR R2, [R1]

    ; Set RD high (not used in write operation)
    ORR R2, R2, #TFT_RD
    STR R2, [R1]

    ; Send command (R0 contains command)
    BIC R2, R2, #0xFF   ; Clear data bits PE0-PE7
    AND R0, R0, #0xFF   ; Ensure only 8 bits
    ORR R2, R2, R0      ; Combine with control bits
    STR R2, [R1]

    ; Generate WR pulse (low > high)
    BIC R2, R2, #TFT_WR
    STR R2, [R1]
    ORR R2, R2, #TFT_WR
    STR R2, [R1]

    ; Set CS high
    ORR R2, R2, #TFT_CS
    STR R2, [R1]
    POP {R1-R2, LR}
    BX LR

; *************************************************************
; TFT Write Data (R0 = data)
; *************************************************************
TFT_WriteData
    PUSH {R1-R2, LR}

    ; Set CS low
    LDR R1, =GPIOA_BASE + GPIO_ODR
    LDR R2, [R1]
    BIC R2, R2, #TFT_CS
    STR R2, [R1]

    ; Set DC (RS) high for data
    ORR R2, R2, #TFT_DC
    STR R2, [R1]

    ; Set RD high (not used in write operation)
    ORR R2, R2, #TFT_RD
    STR R2, [R1]

    ; Send data (R0 contains data)
    BIC R2, R2, #0xFF   ; Clear data bits PE0-PE7
    AND R0, R0, #0xFF   ; Ensure only 8 bits
    ORR R2, R2, R0      ; Combine with control bits
    STR R2, [R1]

    ; Generate WR pulse
    BIC R2, R2, #TFT_WR
    STR R2, [R1]
    ORR R2, R2, #TFT_WR
    STR R2, [R1]

    ; Set CS high
    ORR R2, R2, #TFT_CS
    STR R2, [R1]

    POP {R1-R2, LR}
    BX LR

; *************************************************************
; TFT Initialization
; *************************************************************
TFT_Init
    PUSH {R0-R2, LR}

    ; Reset sequence
    LDR R1, =GPIOA_BASE + GPIO_ODR
    LDR R2, [R1]
    
    ; Reset low
    BIC R2, R2, #TFT_RST
    STR R2, [R1]
    BL delay
    
    ; Reset high
    ORR R2, R2, #TFT_RST
    STR R2, [R1]
    BL delay
    
    ; Set Pixel Format (16-bit)
    MOV R0, #0x3A
    BL TFT_WriteCommand
    MOV R0, #0x55
    BL TFT_WriteData

    ; Sleep Out
    MOV R0, #0x11
    BL TFT_WriteCommand
    BL delay
	
	 ;memory accsess
	MOV R0, #0x36       ; MADCTL command
	BL TFT_WriteCommand
	MOV R0, #0x48       ; Parameter value (see explanation below)
	BL TFT_WriteData

    
    ; Display ON
    MOV R0, #0x29
    BL TFT_WriteCommand

    POP {R0-R2, LR}
    BX LR
	
	LTORG
	ALIGN

; *************************************************************
; TFT Fill Screen (R0 = 16-bit color)
; *************************************************************
TFT_FillScreen
    PUSH {R1-R5, LR}

    ; Save color
    MOV R5, R0

    ; Set Column Address (0-239)
    MOV R0, #0x2A
    BL TFT_WriteCommand
    MOV R0, #0x00
    BL TFT_WriteData
    MOV R0, #0x00
    BL TFT_WriteData
    MOV R0, #0x00
    BL TFT_WriteData
    MOV R0, #0xEF      ; 239
    BL TFT_WriteData

    ; Set Page Address (0-319)
    MOV R0, #0x2B
    BL TFT_WriteCommand
    MOV R0, #0x00
    BL TFT_WriteData
    MOV R0, #0x00
    BL TFT_WriteData
    MOV R0, #0x01      ; High byte of 0x013F (319)
    BL TFT_WriteData
    MOV R0, #0x3F      ; Low byte of 0x013F (319)
    BL TFT_WriteData

    ; Memory Write
    MOV R0, #0x2C
    BL TFT_WriteCommand

    ; Prepare color bytes
    MOV R1, R5, LSR #8     ; High byte
    AND R2, R5, #0xFF      ; Low byte

    ; Fill screen with color (320x240 = 76800 pixels)
    LDR R3, =76800
FillLoop
    ; Write high byte
    MOV R0, R1
    BL TFT_WriteData
    
    ; Write low byte
    MOV R0, R2
    BL TFT_WriteData
    
    SUBS R3, R3, #1
    BNE FillLoop

    POP {R1-R5, LR}
    BX LR


; *************************************************************
; Draw Square Center at (y=R5, x=R6 ,Color=R1)
; *************************************************************
TFT_DrawSquare
    PUSH {LR}
    ;TODO
	MOV R8, R5
    SUB R8, R8, #10      ; x_start
    ADD R10, R5, #10     ; x_end

    MOV R9, R6
    SUB R9, R9, #10      ; y_start
    ADD R11, R6, #10     ; y_end

    ; Set Column Address
    MOV R0, #0x2A
    BL TFT_WriteCommand
    MOV R0, R8, LSR #8
    BL TFT_WriteData
    MOV R0, R8
    BL TFT_WriteData
    MOV R0, R10, LSR #8
    BL TFT_WriteData
    MOV R0, R10
    BL TFT_WriteData

    ; Set Page Address
    MOV R0, #0x2B
    BL TFT_WriteCommand
    MOV R0, R9, LSR #8
    BL TFT_WriteData
    MOV R0, R9
    BL TFT_WriteData
    MOV R0, R11, LSR #8
    BL TFT_WriteData
    MOV R0, R11
    BL TFT_WriteData

    ; Memory Write
    MOV R0, #0x2C
    BL TFT_WriteCommand

    ; Prepare color bytes
    MOV R2, R1, LSR #8  ; High byte
    AND R3, R1, #0xFF   ; Low byte

    ; Write pixels (width = 20, height = 20)
    MOV R4, #400
DrawSquare_Loop
    MOV R0, R2
    BL TFT_WriteData
    MOV R0, R3
    BL TFT_WriteData
    SUBS R4, R4, #1
    BNE DrawSquare_Loop
	
	POP {LR}
    BX LR
	
	
delay
    PUSH {R0, LR}
    LDR R0, =DELAY_INTERVAL
delay_loop
    SUBS R0, R0, #1
    BNE delay_loop
    POP {R0, LR}
    BX LR

; *************************************************************
; draw_rectangle: Draw a rectangle between 4 lines (x1, x2) to (y1, y2) with the given color
; R0 = color ,R1 = Y1 ,R2 = Y2 ,R3 = X1 ,R4 = X2
; *************************************************************
Draw_Rectangle
    PUSH {R1-R12, LR}

    ; Save color
    MOV R5, R0
    
    ; Set Column Address (0-239)
    MOV R0, #0x2A
    BL TFT_WriteCommand
    ;HIGHER EIGHT BITS OF START COLUMN
    MOV R0, R3, LSR #8 
    BL TFT_WriteData
    ;LOWER EIGHT BITS BITS OF START COLUMN
    MOV R0, R3
    BL TFT_WriteData
    ;HIGHER EIGHT BITS OF END COLUMN
    MOV R0, R4, LSR #8    ;TODO
    BL TFT_WriteData
    ;LOWER EIGHT BITS OF END COLUMN
    MOV R0, R4      
    BL TFT_WriteData

    ; Set Page Address (0-319)
    MOV R0, #0x2B
    BL TFT_WriteCommand
    MOV R0, R1, LSR #8    
    BL TFT_WriteData
    ;LOWER EIGHT BITS OF START PAGE
    MOV R0, R1      
    BL TFT_WriteData
    MOV R0, R2, LSR #8    
    BL TFT_WriteData
    ;LOWER EIGHT BITS OF END PAGE
    MOV R0, R2      
    BL TFT_WriteData
    
    ; Memory Write
    MOV R0, #0x2C
    BL TFT_WriteCommand

    ; Prepare color bytes
    MOV R10, R5, LSR #8     ; High byte
    AND R9, R5, #0xFF      ; Low byte

    ; Calculate total pixels: (X2 - X1 + 1) * (Y2 - Y1 + 1)
    SUBS R7, R4, R3
    ADD R7, R7, #1    
    SUBS R8, R2, R1
    ADD R8, R8, #1    
    MUL R3, R8, R7
FillLoop_RECT
    ; Write high byte
    MOV R0, R10
    BL TFT_WriteData
    
    ; Write low byte
    MOV R0, R9
    BL TFT_WriteData
    
    SUBS R3, R3, #1
    BNE FillLoop_RECT

    POP {R1-R12, PC}
    ENDFUNC
	ALIGN
    END
